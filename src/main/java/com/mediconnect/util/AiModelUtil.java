package com.mediconnect.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.springframework.stereotype.Component;

@Component
public class AiModelUtil {
    
    private static final Random random = new Random();
    
    /**
     * Analyze symptoms and generate diagnosis results
     * 
     * Note: This is a simulation of an AI model. In a real application, this would
     * integrate with a machine learning model or external AI service.
     */
    public Map<String, Object> analyzeSymptoms(String symptoms, Map<String, Object> additionalInfo) {
        // Simulate AI processing delay
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        Map<String, Object> response = new HashMap<>();
        
        // Generate analysis report
        String analysisReport = generateAnalysisReport(symptoms);
        response.put("analysisReport", analysisReport);
        
        // Generate recommended tests
        String recommendedTests = generateRecommendedTests(symptoms);
        response.put("recommendedTests", recommendedTests);
        
        // Generate treatment suggestions
        String treatmentSuggestions = generateTreatmentSuggestions(symptoms);
        response.put("treatmentSuggestions", treatmentSuggestions);
        
        // Generate special notes
        String specialNotes = "Patient should follow up in 2 weeks. Monitor for any changes in symptoms.";
        response.put("specialNotes", specialNotes);
        
        // Generate confidence score (0.0 to 1.0)
        double confidenceScore = 0.7 + (random.nextDouble() * 0.3); // Between 0.7 and 1.0
        response.put("confidenceScore", confidenceScore);
        
        // Generate predictions
        List<Map<String, Object>> predictions = generatePredictions(symptoms);
        response.put("predictions", predictions);
        
        return response;
    }
    
    /**
     * Generate analysis report based on symptoms
     */
    private String generateAnalysisReport(String symptoms) {
        // In a real application, this would be generated by an AI model
        return "Patient presents with " + symptoms + ". Analysis indicates potential conditions " +
               "listed in the predictions section. Patient's vital signs are within normal range. " +
               "Based on the symptoms and patient history, further diagnostic tests are recommended.";
    }
    
    /**
     * Generate recommended tests based on symptoms
     */
    private String generateRecommendedTests(String symptoms) {
        // In a real application, this would be generated by an AI model
        return "Complete Blood Count (CBC), Comprehensive Metabolic Panel (CMP), " +
               "Urinalysis, Chest X-ray, ECG";
    }
    
    /**
     * Generate treatment suggestions based on symptoms
     */
    private String generateTreatmentSuggestions(String symptoms) {
        // In a real application, this would be generated by an AI model
        return "Rest and hydration. Over-the-counter pain relievers for comfort. " +
               "Avoid strenuous activity for at least 7 days. Follow up with specialist " +
               "if symptoms persist for more than 2 weeks.";
    }
    
    /**
     * Generate predictions (potential conditions) based on symptoms
     */
    private List<Map<String, Object>> generatePredictions(String symptoms) {
        List<Map<String, Object>> predictions = new ArrayList<>();
        
        // In a real application, these would be generated by an AI model
        // For simulation, we'll create some sample predictions
        
        // Condition 1
        Map<String, Object> prediction1 = new HashMap<>();
        prediction1.put("conditionName", "Upper Respiratory Infection");
        prediction1.put("probability", 0.75);
        prediction1.put("reasonForDiagnosis", "Symptoms align with common presentation of URI.");
        prediction1.put("supportingEvidence", "Reported sore throat, cough, and nasal congestion.");
        prediction1.put("severityLevel", 2);
        prediction1.put("relatedConditions", "Sinusitis, Bronchitis");
        predictions.add(prediction1);
        
        // Condition 2
        Map<String, Object> prediction2 = new HashMap<>();
        prediction2.put("conditionName", "Seasonal Allergies");
        prediction2.put("probability", 0.60);
        prediction2.put("reasonForDiagnosis", "Symptoms consistent with allergic reaction.");
        prediction2.put("supportingEvidence", "Nasal congestion, sneezing, and timing coincides with allergy season.");
        prediction2.put("severityLevel", 1);
        prediction2.put("relatedConditions", "Allergic Rhinitis, Sinusitis");
        predictions.add(prediction2);
        
        // Condition 3
        Map<String, Object> prediction3 = new HashMap<>();
        prediction3.put("conditionName", "Viral Pharyngitis");
        prediction3.put("probability", 0.45);
        prediction3.put("reasonForDiagnosis", "Symptoms suggest viral throat infection.");
        prediction3.put("supportingEvidence", "Sore throat, mild fever, and fatigue.");
        prediction3.put("severityLevel", 2);
        prediction3.put("relatedConditions", "Tonsillitis, Laryngitis");
        predictions.add(prediction3);
        
        return predictions;
    }
}